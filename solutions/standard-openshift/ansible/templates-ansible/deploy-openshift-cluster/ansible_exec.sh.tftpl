#!/bin/bash

### Using input variables from terraform
ansible_playbook=${ansible_playbook_file}
ansible_log_path=${ansible_log_path}
ansible_inventory=${ansible_inventory}
ansible_private_key_file=${ansible_private_key_file}

ansible_playbook_name=$(basename $${ansible_playbook})

# Install ansible-core during the initial bootstrap
if [ "$ansible_playbook_name" == "ocp-cluster-install-configuration-playbook.yml" ]; then
  echo "Installing ansible-core as a part of bootstrap..."
  yum install -y expect ansible-core
fi

# Create ansible.cfg file
echo -e "[defaults]\nhost_key_checking=False" >ansible.cfg
export ANSIBLE_LOG_PATH=$${ansible_log_path}/$${ansible_playbook_name}.$(date "+%Y.%m.%d-%H.%M.%S").log
export ANSIBLE_PRIVATE_KEY_FILE=$${ansible_private_key_file}
export IBMCLOUD_API_KEY=$${IBMCLOUD_API_KEY}

#Execute ansible playbook
unbuffer ansible-playbook -i $${ansible_inventory} $${ansible_playbook} --extra-vars "IBMCLOUD_API_KEY=$IBMCLOUD_API_KEY"
## On failure:
if [ $? -ne 0 ]; then
    if [ -f "/root/.powervs/config.json" ]; then ansible-vault encrypt /root/.powervs/config.json --vault-password-file password_file; fi
    rm -f password_file
    rm -rf $${ansible_private_key_file}
    exit 1
fi
echo \"Playbook command successful\"
rm -rf $${ansible_private_key_file}
if [ -f "/root/.powervs/config.json" ]; then ansible-vault encrypt /root/.powervs/config.json --vault-password-file password_file; fi
rm -f password_file
