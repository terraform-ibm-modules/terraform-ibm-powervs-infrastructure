#!/bin/bash
############################################################
# Configures squid client proxy, Registers and updates OS  #
# Change values of the variables and execute               #
# to run the function, pass as argument:                   #
# setup_proxy ,register_os or update_os                    #
############################################################

PROXY_IP_AND_PORT=${proxy_ip_and_port}
NO_PROXY_IP=${no_proxy_ip}

README="/usr/share/powervs-fls/powervs-fls-readme.md"
SUBSCRIPTION_LOG="/var/log/powervs-fls.log"
ARCH=$(uname -p)

############################################################
# Helper Functions                                         #
############################################################

print_out() {
  echo "$(date -u):  $*"
}

############################################################
# Check OS Distribution                                    #
############################################################

if [ -f /etc/SuSE-release ]; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/SuSE-release"
  print_out "Detected OS: $OS_DETECTED " # "$(cat /etc/SuSE-release)"
  PROXY_CONFIG_FILE="/etc/bash.bashrc"
fi

if grep --quiet "SUSE Linux Enterprise Server" /etc/os-release; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/os-release"
  print_out "Detected OS: $OS_DETECTED " # "$(cat /etc/os-release)"
  PROXY_CONFIG_FILE="/etc/bash.bashrc"
fi

if [ -f /etc/redhat-release ]; then
  OS_DETECTED=RHEL
  #  echo "Executing command: cat /etc/redhat-release"
  print_out "Detected OS: $OS_DETECTED " #"$(cat /etc/redhat-release)"
  PROXY_CONFIG_FILE="/etc/bashrc"
fi

source $PROXY_CONFIG_FILE

##########################################
#  Proxy setup                           #
##########################################
setup_proxy() {
  if [[ -n $NO_PROXY_IP ]]; then
    grep -qx "export no_proxy=$NO_PROXY_IP" "$PROXY_CONFIG_FILE" || echo "export no_proxy=$NO_PROXY_IP" >>"$PROXY_CONFIG_FILE"
    source "$PROXY_CONFIG_FILE"
  fi

  if [[ $PROXY_IP_AND_PORT =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$ ]]; then
    #######  SQUID Forward PROXY CLIENT SETUP ############
    print_out "Proxy Server IP:  $PROXY_IP_AND_PORT"
    print_out "Setting exports in $PROXY_CONFIG_FILE file On $OS_DETECTED"
    grep -qx "export http_proxy=http://$PROXY_IP_AND_PORT" "$PROXY_CONFIG_FILE" || echo "export http_proxy=http://$PROXY_IP_AND_PORT" >>"$PROXY_CONFIG_FILE"
    grep -qx "export https_proxy=http://$PROXY_IP_AND_PORT" "$PROXY_CONFIG_FILE" || echo "export https_proxy=http://$PROXY_IP_AND_PORT" >>"$PROXY_CONFIG_FILE"
    grep -qx "export HTTP_PROXY=http://$PROXY_IP_AND_PORT" "$PROXY_CONFIG_FILE" || echo "export HTTP_PROXY=http://$PROXY_IP_AND_PORT" >>"$PROXY_CONFIG_FILE"
    grep -qx "export HTTPS_PROXY=http://$PROXY_IP_AND_PORT" "$PROXY_CONFIG_FILE" || echo "export HTTPS_PROXY=http://$PROXY_IP_AND_PORT" >>"$PROXY_CONFIG_FILE"
    if [ "$OS_DETECTED" == "RHEL" ]; then
      grep -qx "proxy=http://$PROXY_IP_AND_PORT" /etc/dnf/dnf.conf || echo "proxy=http://$PROXY_IP_AND_PORT" >>/etc/dnf/dnf.conf
    fi
    source "$PROXY_CONFIG_FILE"
  fi

}

###########################################
# Registration helper functions           #
###########################################

suseconnect_check_process() {

  ##### Check for SUSEConnect process
  print_out "Sleeping 60 seconds in case of auto OS registration, as this causes a conflict for SUSEConnect Process."
  sleep 60
  SUSECONNECT_PID="$(pgrep SUSEConnect)"
  if [ ! -z "$SUSECONNECT_PID" ]; then
    print_out "A SUSEConnect PID process with PID $SUSECONNECT_PID is still running, waiting for it to finish. Max Timeout 180 seconds."
    timeout 180 tail --pid=$SUSECONNECT_PID -f /dev/null
  fi
  ###### Check for running zypper process
  ZYPPER_PID="$(pidof zypper)"
  if [ ! -z "$ZYPPER_PID" ]; then
    print_out " A zypper process with PID $ZYPPER_PID is still running, waiting for it to finish. Max Timeout 180 seconds."
    timeout 180 tail --pid=$ZYPPER_PID -f /dev/null
  fi
}

suseconnect_register() {
  SUSEConnect --de-register >/dev/null
  SUSEConnect --cleanup >/dev/null
  mv "$SUBSCRIPTION_LOG" "$SUBSCRIPTION_LOG.old"
  cmd=$(grep /usr/local/bin/sles-cloud-init.sh <$README | grep -v RMT_Server_address)
  $cmd "$PROXY_IP_AND_PORT"
}

suseconnect_sub_final_status() {
  ACTIVATION_STATUS="$(SUSEConnect --status | grep -ci "error")"
  if [ "$ACTIVATION_STATUS" != 0 ]; then
    print_out "OS activation Failed"
    exit 1
  fi
}

subscription_mgr_check_process() {
  ##### Check for subscription-manager process
  echo "Sleeping 60 seconds in case of auto OS registration, as this causes a conflict for subscription-manager Process."
  sleep 60
  SUBS_MANAGER_PID="$(pgrep -f subscription-manager)"
  if [ ! -z "$SUBS_MANAGER_PID" ]; then
    echo "A subscription-manager PID process with PID $SUBS_MANAGER_PID is still running, waiting for it to finish. Max Timeout 180 seconds."
    timeout 180 tail --pid=$SUBS_MANAGER_PID -f /dev/null
  fi
  ###### Check for running zypper process
  YUM_PID="$(pidof yum)"
  if [ ! -z "$YUM_PID" ]; then
    echo " A yum process with PID $YUM_PID is still running, waiting for it to finish. Max Timeout 180 seconds."
    timeout 180 tail --pid=$YUM_PID -f /dev/null
  fi
}

subscription_mgr_register() {
  mv "$SUBSCRIPTION_LOG" "$SUBSCRIPTION_LOG.old"
  cmd=$(grep /usr/local/bin/rhel-cloud-init.sh <$README | grep Private.proxy.IP.address | sed "s/Private.proxy.IP.address:3128/$PROXY_IP_AND_PORT/g")
  $cmd
}

subscription_mgr_final_status() {
  ACTIVATION_STATUS="$(subscription-manager status | grep -c "Overall Status: Current")"
  if [ "$ACTIVATION_STATUS" == 0 ]; then
    print_out "OS activation Failed"
    exit 1
  fi
}

###########################################
# OS Registration                         #
###########################################
register_os() {

  ###########################################
  # SLES Registration                       #
  ###########################################
  if [ "$OS_DETECTED" == "SLES" ]; then

    ### Call function to check running process.
    suseconnect_check_process

    ###### Check if system is registered. Subscription is done when not registered.
    OS_ACTIVATED="$(SUSEConnect --status | grep -ci "\"status\":\"Registered\"")"
    if [ "$OS_ACTIVATED" -ge 1 ]; then
      print_out "OS is Registered"
    else
      ##### Check if the system is a x86_64 processor
      if [[ "$ARCH" == "x86_64" ]]; then
        #### Wait for registration to complete
        ATTEMPT=1
        MAX_ATTEMPTS=15
        while [[ "$ATTEMPT" -le "$MAX_ATTEMPTS" ]]; do
          print_out "Sleeping 60 seconds"
          sleep 60
          ATTEMPT=$((ATTEMPT + 1))
          OS_ACTIVATED="$(SUSEConnect --status | grep -ci "\"status\":\"Registered\"")"
          if [[ "$OS_ACTIVATED" -ge 1 ]]; then
            print_out "OS is Registered"
            break
          fi
        done
      fi

      ##### Check if the system is a ppc64le processor
      if [[ "$ARCH" == "ppc64le" ]]; then

        if [ ! -e "$README" ]; then
          print_out "PER enabled DC. Registration was done automatically."
        else
          #will run the register command
          suseconnect_register
        fi

        print_out "Sleeping 30 seconds"
        sleep 30
        if [ ! -e "$SUBSCRIPTION_LOG" ]; then
          print_out "OS registration script did not create $SUBSCRIPTION_LOG file. Possible causes: $README file is missing or Registration did not happen automatically. SLES registration has failed, exiting"
          exit 1
        fi

        ATTEMPT=1
        MAX_ATTEMPTS=15
        while [[ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]]; do
          print_out "Sleeping 60 seconds"
          sleep 60
          ATTEMPT=$((ATTEMPT + 1))
          if grep -iq failed "$SUBSCRIPTION_LOG"; then
            print_out "SLES registration has failed, exiting"
            exit 1
          fi
          if grep -q "Successfully completed SLES subscription registration process" "$SUBSCRIPTION_LOG"; then
            print_out "Successfully completed SLES subscription registration process. Done"
            break
          fi
        done
      fi

      if [[ "$ATTEMPT" -gt "$MAX_ATTEMPTS" ]]; then
        print_out "Timeout: SLES registration process failed, or still ongoing"
        exit 1
      fi

      ##### If zypper command is running, wait for it to exit as this causes a blocker for SUSEConnect command
      suseconnect_check_process

      ## Get suse connect final activation status
      suseconnect_sub_final_status
    fi
  fi

  ###########################################
  # RHEL Registration                       #
  ###########################################
  if [ "$OS_DETECTED" == "RHEL" ]; then

    subscription_mgr_check_process

    ###### Checking if system is registered. Subscription is done when not registered.
    OS_ACTIVATED="$(subscription-manager status | grep -ic "Overall Status: Current")"
    if [ "$OS_ACTIVATED" -ge 1 ]; then
      print_out "OS is Registered"
    else
      ##### check if the system is a x86_64 processor
      if [[ "$ARCH" == "x86_64" ]]; then
        #### Wait for registration to complete
        ATTEMPT=1
        MAX_ATTEMPTS=15
        while [[ "$ATTEMPT" -le "$MAX_ATTEMPTS" ]]; do
          print_out "Sleeping 60 seconds"
          sleep 60
          ATTEMPT=$((ATTEMPT + 1))
          OS_ACTIVATED="$(subscription-manager status | grep -c "Overall Status: Current")"
          if [[ "$OS_ACTIVATED" -ge 1 ]]; then
            print_out "OS is Registered"
            break
          fi
        done
      fi

      ##### check if the system is a ppc64le processor
      if [[ "$ARCH" == "ppc64le" ]]; then
        if [ ! -e "$README" ]; then
          print_out "PER enabled DC. Registration was done automatically."
        else
          #will run the register command
          subscription_mgr_register
        fi

        print_out "Sleeping 30 seconds"
        sleep 30
        if [ ! -e "$SUBSCRIPTION_LOG" ]; then
          print_out "OS registration script did not create $SUBSCRIPTION_LOG file. Possible causes: $README file is missing or Registration did not happen automatically. RHEL registration has failed, exiting"
          exit 1
        fi

        ATTEMPT=1
        MAX_ATTEMPTS=15
        while [[ "$ATTEMPT" -lt "$MAX_ATTEMPTS" ]]; do
          print_out "Sleeping 60 seconds"
          sleep 60
          ATTEMPT=$((ATTEMPT + 1))
          if grep -i failed "$SUBSCRIPTION_LOG"; then
            print_out "RHEL registration has failed, exiting"
            exit 1
          fi
          if subscription-manager config | grep -q ".iaas.service.networklayer.com"; then
            print_out "Successfully completed RHEL subscription registration process. Done"
            break
          fi
        done

        ### Update linux system roles
        yum update rhel-system-roles-sap -y

      fi

      if [[ "$ATTEMPT" -gt "$MAX_ATTEMPTS" ]]; then
        print_out "Timeout: RHEL registration process failed, or still ongoing"
        exit 1
      fi

      ## Get RHEL subscription final activation status
      subscription_mgr_final_status
    fi
  fi
}

##########################################
#  Update OS and Reboot                  #
##########################################
update_os() {

  # set client=1 indicating that proxy client setup exists and reconfigure after OS update
  if grep -qx "export http_proxy=http://$PROXY_IP_AND_PORT" $PROXY_CONFIG_FILE; then client=1; fi

  # update os
  print_out "Updating OS"

  if [ "$OS_DETECTED" == "SLES" ]; then
    zypper update -y >>os_update.log
  fi

  if [ "$OS_DETECTED" == "RHEL" ]; then
    yum update -y >>os_update.log
  fi

  print_out "Updating OS Completed"

  # Reconfigure proxy client config after updating os
  if [[ $client ]]; then
    setup_proxy
  fi

  # Reboot VM
  print_out "Rebooting VM"
  shutdown -r +1
}

### to run the function, pass them as argument: setup_proxy , register_os , update_os
$1
