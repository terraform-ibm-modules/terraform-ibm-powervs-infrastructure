#!/bin/bash
############################################################
# Installs necessary packages
# Setting install_packages = true will install packages.   #
############################################################
install_packages=${install_packages}

############################################################
# Check OS Distribution                                    #
############################################################

if [ -f /etc/SuSE-release ]; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/SuSE-release"
  echo -e "Detected OS: $OS_DETECTED \n" # "$(cat /etc/SuSE-release)"
fi

if grep --quiet "SUSE Linux Enterprise Server" /etc/os-release; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/os-release"
  echo -e "Detected OS: $OS_DETECTED \n" # "$(cat /etc/os-release)"
fi

if [ -f /etc/redhat-release ]; then
  OS_DETECTED=RHEL
  #  echo "Executing command: cat /etc/redhat-release"
  echo -e "Detected OS: $OS_DETECTED \n" #"$(cat /etc/redhat-release)"
fi

###########################################
# SLES : Install Packages                 #
###########################################

if [ "$OS_DETECTED" == "SLES" ]; then

  if [ "$install_packages" == true ]; then

    VERSION_ID=$(grep VERSION_ID /etc/os-release | awk -F= '{ print $NF }' | sed 's/\"//g')
    ARCH=$(uname -p)

    ##### Activate SuSE packages #####
    zypper --gpg-auto-import-keys ref >/dev/null
    SUSEConnect -p PackageHub/"$${VERSION_ID}"/"$${ARCH}" >/dev/null
    zypper --gpg-auto-import-keys ref >/dev/null
    SUSEConnect -p sle-module-server-applications/"$${VERSION_ID}"/"$${ARCH}" >/dev/null
    zypper --gpg-auto-import-keys ref >/dev/null
    SUSEConnect -p sle-module-public-cloud/"$${VERSION_ID}"/"$${ARCH}" >/dev/null
    zypper --gpg-auto-import-keys ref >/dev/null

    ##### Zypper Install Ansible #####
    echo "Installing ansible package using zypper"
    zypper install -y ansible >/dev/null
    if ! which ansible >/dev/null; then
      echo "ansible installation failed, exiting"
      exit 1
    fi

    echo "All packages are installed successfully"
  fi
fi

###########################################
# RHEL : Install Packages                 #
###########################################

if [ "$OS_DETECTED" == "RHEL" ]; then

  if [ "$install_packages" == true ]; then

    ARCH=$(uname -p)

    ##### pip Install Ansible ####
    if [[ "$ARCH" == "x86_64" ]]; then
      if ! subscription-manager repos --enable=ansible-2-for-rhel-8-x86_64-rpms >/dev/null 2>/dev/null; then
        echo "Installing python3-pip package using yum"
        yum install -y python3-pip >/dev/null 2>/dev/null
        echo "Installing ansible using pip3 package"
        pip3 install ansible >/dev/null 2>/dev/null
      else
        echo "Installing ansible using yum"
        yum install -y ansible
      fi
    fi
    if [[ "$ARCH" == "ppc64le" ]]; then
      if ! subscription-manager repos --enable=ansible-2-for-rhel-8-ppc64le-rpms >/dev/null 2>/dev/null; then
        echo "Installing python3-pip package using yum"
        yum install -y python3-pip >/dev/null 2>/dev/null
        echo "Installing ansible using pip3 package"
        pip3 install ansible >/dev/null 2>/dev/null
      else
        echo "Installing ansible using yum"
        yum install -y ansible
      fi
    fi
    if ! which ansible >/dev/null; then
      echo "ansible installation failed, exiting"
      exit 1
    fi

    ##### yum Install expect ####
    echo "Installing expect package using yum"
    yum install -y expect >/dev/null 2>/dev/null
    if ! which unbuffer >/dev/null; then
      echo "expect installation failed, exiting"
      exit 1
    fi

    echo "All packages are installed successfully"
  fi
fi
