#!/bin/bash
############################################################
# Configures squid client proxy and Registers the OS.      #
# Change values of the variables and execute               #
############################################################

proxy_ip_and_port=${proxy_ip_and_port}
no_proxy_ip=${no_proxy_ip}

############################################################
# Check OS Distribution                                    #
############################################################

if [ -f /etc/SuSE-release ]; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/SuSE-release"
  echo -e "Detected OS: $OS_DETECTED \n" # "$(cat /etc/SuSE-release)"
fi

if grep --quiet "SUSE Linux Enterprise Server" /etc/os-release; then
  OS_DETECTED=SLES
  #  echo "Executing command: cat /etc/os-release"
  echo -e "Detected OS: $OS_DETECTED \n" # "$(cat /etc/os-release)"
fi

if [ -f /etc/redhat-release ]; then
  OS_DETECTED=RHEL
  #  echo "Executing command: cat /etc/redhat-release"
  echo -e "Detected OS: $OS_DETECTED \n" #"$(cat /etc/redhat-release)"
fi

###########################################
# SLES : Proxy and OS Registration        #
###########################################
if [ "$OS_DETECTED" == "SLES" ]; then

  ARCH=$(uname -p)
  FILE="/etc/bash.bashrc"

  if [[ -n $no_proxy_ip ]]; then
    grep -qx "export no_proxy=$no_proxy_ip" "$FILE" || echo "export no_proxy=$no_proxy_ip" >>"$FILE"
    source /etc/bash.bashrc
  fi

  if [[ $proxy_ip_and_port =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$ ]]; then
    #######  SQUID Forward PROXY CLIENT SETUP ############
    echo "Proxy Server IP:  $proxy_ip_and_port"
    echo "Setting exports in /etc/bash.bashrc file On SLES"
    grep -qx "export http_proxy=http://$proxy_ip_and_port" "$FILE" || echo "export http_proxy=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export https_proxy=http://$proxy_ip_and_port" "$FILE" || echo "export https_proxy=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export HTTP_PROXY=http://$proxy_ip_and_port" "$FILE" || echo "export HTTP_PROXY=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export HTTPS_PROXY=http://$proxy_ip_and_port" "$FILE" || echo "export HTTPS_PROXY=http://$proxy_ip_and_port" >>"$FILE"
    source /etc/bash.bashrc

    ###### Checking if system is registered. Subscription is done when not registered.
    OS_Activated="$(SUSEConnect --status | grep -ci "\"status\":\"Registered\"")"
    if [ "$OS_Activated" -ge 1 ]; then
      echo "OS is Registered"
    else
      ##### check if the system is a x86_64 processor
      if [[ "$ARCH" == "x86_64" ]]; then
        #### Wait for registration to complete
        count=0
        while [[ $count -le 15 ]]; do
          sleep 60
          OS_Activated="$(SUSEConnect --status | grep -ci "\"status\":\"Registered\"")"
          if [[ "$OS_Activated" -ge 1 ]]; then
            echo "OS is Registered"
            break
          fi
          count=$((count + 1))
        done
      fi

      ##### check if the system is a ppc64le processor
      if [[ "$ARCH" == "ppc64le" ]]; then
        SUSEConnect --de-register >/dev/null
        SUSEConnect --cleanup >/dev/null
        mv /var/log/powervs-fls.log /var/log/powervs-fls.log.old
        cmd=$(grep /usr/local/bin/sles-cloud-init.sh </usr/share/powervs-fls/powervs-fls-readme.md | grep -v RMT_Server_address)
        $cmd "${proxy_ip_and_port}"
        count=1
        while [[ $count -le 15 ]]; do
          sleep 60
          count=$((count + 1))
          if grep -i failed /var/log/powervs-fls.log; then
            echo "SLES registration has failed, exiting"
            exit 1
          fi
          if grep "Successfully completed SLES subscription registration process" /var/log/powervs-fls.log; then
            echo "Successfully completed SLES subscription registration process. Done"
            break
          fi
        done
      fi

      if [[ $count -gt 15 ]]; then
        echo "Timeout: SLES registration process failed, or still ongoing"
        exit 1
      fi

      Activation_status="$(SUSEConnect --status | grep -ci "error")"
      if [ "$Activation_status" != 0 ]; then
        echo "OS activation Failed"
        exit 1
      fi
    fi
  fi
fi

###########################################
# RHEL : Proxy and OS Registration        #
###########################################
if [ "$OS_DETECTED" == "RHEL" ]; then
  ARCH=$(uname -p)
  FILE="/etc/bashrc"

  if [[ -n $no_proxy_ip ]]; then
    grep -qx "export no_proxy=$no_proxy_ip" "$FILE" || echo "export no_proxy=$no_proxy_ip" >>"$FILE"
    source /etc/bashrc
  fi

  if [[ $proxy_ip_and_port =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$ ]]; then
    #######  SQUID Forward PROXY CLIENT SETUP ############
    echo "Setting exports in /etc/bashrc and /etc/dnf file On RHEL"
    grep -qx "export http_proxy=http://$proxy_ip_and_port" "$FILE" || echo "export http_proxy=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export https_proxy=http://$proxy_ip_and_port" "$FILE" || echo "export https_proxy=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export HTTP_PROXY=http://$proxy_ip_and_port" "$FILE" || echo "export HTTP_PROXY=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "export HTTPS_PROXY=http://$proxy_ip_and_port" "$FILE" || echo "export HTTPS_PROXY=http://$proxy_ip_and_port" >>"$FILE"
    grep -qx "proxy=http://$proxy_ip_and_port" /etc/dnf/dnf.conf || echo "proxy=http://$proxy_ip_and_port" >>/etc/dnf/dnf.conf
    source /etc/bashrc

    ###### Checking if system is registered. Subscription is done when not registered.
    OS_Activated="$(subscription-manager status | grep -ic "Overall Status: Current")"
    if [ "$OS_Activated" -ge 1 ]; then
      echo "OS is Registered"
    else
      ##### check if the system is a x86_64 processor
      if [[ "$ARCH" == "x86_64" ]]; then
        #### Wait for registration to complete
        count=0
        while [[ $count -le 15 ]]; do
          sleep 60
          OS_Activated="$(subscription-manager status | grep -c "Overall Status: Current")"
          if [[ "$OS_Activated" -ge 1 ]]; then
            echo "OS is Registered"
            break
          fi
          count=$((count + 1))
        done
      fi

      ##### check if the system is a ppc64le processor
      if [[ "$ARCH" == "ppc64le" ]]; then
        mv /var/log/powervs-fls.log /var/log/powervs-fls.log.old
        cmd=$(grep /usr/local/bin/rhel-cloud-init.sh </usr/share/powervs-fls/powervs-fls-readme.md | grep Private.proxy.IP.address | sed "s/Private.proxy.IP.address:3128/$proxy_ip_and_port/g")
        $cmd
        count=1
        while [[ $count -le 15 ]]; do
          sleep 60
          count=$((count + 1))
          if grep -i failed /var/log/powervs-fls.log; then
            echo "RHEL registration has failed, exiting"
            exit 1
          fi
          ##### Check if registration was successful
          #get the subscription server name from /var/log/powervs-fls.log
          subscription_server=$(grep sap_hana /usr/share/powervs-fls/powervs-fls-readme.md | awk -F"-u" '{ print $NF }' | awk '{ print $1 }')
          if subscription-manager config | grep "$subscription_server"; then
            echo "Successfully completed RHEL subscription registration process. Done"
            break
          fi
        done
      fi

      if [[ $count -gt 15 ]]; then
        echo "Timeout: RHEL registration process failed, or still ongoing"
        exit 1
      fi

      Activation_status="$(subscription-manager status | grep -c "Overall Status: Current")"
      if [ "$Activation_status" == 0 ]; then
        echo "OS activation Failed"
        exit 1
      fi
    fi
  fi
fi
